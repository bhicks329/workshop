---
resource_types:
  - name: npm-cache
    type: docker-image
    source:
      repository: ((wrregistry-url))/ymedlop/npm-cache-resource
      username: ((wrregistry-username))
      password: ((wrregistry-passwd))
      tag: latest

  - name: kubernetes
    type: docker-image
    source:
      repository: ((wrregistry-url))/zlabjp/kubernetes-resource
      username: ((wrregistry-username))
      password: ((wrregistry-passwd))
      tag: "1.12"

  - name: helm
    type: docker-image
    source:
      repository: ((wrregistry-url))/mustafaatakan/mygoogle
      username: ((wrregistry-username))
      password: ((wrregistry-passwd))
      tag: v1


resources:
  - name: hello_hapi
    type: git
    source: &repo-source
      uri: ((application-url))
      branch: master

  - name: dependency-cache
    type: npm-cache
    source:
      <<: *repo-source
      paths:
        - package.json

  - name: appRegistry
    type: docker-image
    source:
      repository: ((baseregistry-url))/demo-cicd
      username: ((baseregistry-username))
      password: ((baseregistry-passwd))

  - name: scannercli
    type: docker-image
    source:
      repository: ((wrregistry-url))/aquasec/scanner-cli
      username: ((wrregistry-username))
      password: ((wrregistry-passwd))
      tag: 3.2

  - name: helmKube
    type: helm
    source:
#      release: helmKube
      tiller_service_account: tiller
      helm_init_server: true
      cluster_url: ((k8s-server))
      cluster_ca: ((k8s-ca))
      token: ((k8s-token))
      repos:
        - name: chartmuseum
#          url: http://51.140.160.73:8080
          url: ((chartmuseum-url))


jobs:
  - name: Install_dependencies
    plan:
      - get: hello_hapi
        trigger: true
      - get: dependency-cache

  - name: Run_tests
    plan:
      - get: hello_hapi
        trigger: true
        passed: [Install_dependencies]
      - get: dependency-cache
        passed: [Install_dependencies]
      - task: run the test suite
        file: hello_hapi/ci/tasks/run_tests.yml

  - name: Security_scan
    public: true
    plan:
      - aggregate:
        - get: hello_hapi
          trigger: true
          passed: [Run_tests]
        - get: dependency-cache
          passed: [Run_tests]
        - get: scannercli
          params: {save: true}
      - task: run security scan
        privileged: true
#        file: hello_hapi/ci/tasks/run_security_scan.yml
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((wrregistry-url))/amidos/dcind
              username: ((wrregistry-username))
              password: ((wrregistry-passwd))
          inputs:
            - name: scannercli
            - name: hello_hapi
          run:
            path: sh
            args:
              - -exc
              - |
                source /docker-lib.sh
                start_docker

                docker load -i scannercli/image
                docker tag "$(cat scannercli/image-id)" "$(cat scannercli/repository):$(cat scannercli/tag)"

                cd hello_hapi
                docker build -t demo-cicd:tmp .

                docker run -v /var/run/docker.sock:/var/run/docker.sock ((wrregistry-url))/aquasec/scanner-cli:3.2 scan -H http://aqua-web.default:8080 -U ((aquasec-username)) -P ((aquasec-passwd)) --local demo-cicd:tmp
               

  - name: Docker_Push
    public: false
    plan:
      - get: hello_hapi
        trigger: true
        passed: [Security_scan]
      - get: dependency-cache
        passed: [Security_scan]
      - put: appRegistry
        params:
          build: hello_hapi

  - name: ChartRepo_Push
    plan:
      - get: hello_hapi
        trigger: true
        passed: [Docker_Push]
      - task: Create and Upload chart
        privileged: true
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((wrregistry-url))/centos/systemd
              username: ((wrregistry-username))
              password: ((wrregistry-passwd))
          inputs:
            - name: hello_hapi
          run:
            path: sh
            args:
              - -exc
              - |
                uname -a
                yum -y install openssl git wget
                curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
                helm init --client-only
                helm plugin install https://github.com/chartmuseum/helm-push
                curl -X DELETE ((chartmuseum-url))/api/charts/hello_hapi_helmpkg/0.1.0

                cd hello_hapi
                helm create hello_hapi_helmpkg
                cp kubedir/service.yaml hello_hapi_helmpkg/templates
                cp kubedir/deployment.yaml hello_hapi_helmpkg/templates
                rm hello_hapi_helmpkg/templates/ingress.yaml
                helm lint hello_hapi_helmpkg
                helm package hello_hapi_helmpkg
                
                helm repo add chartmuseum ((chartmuseum-url))
                helm push --force hello_hapi_helmpkg-0.1.0.tgz chartmuseum

  - name: Deploy_Chart
    public: false
    plan:
      - get: hello_hapi
        trigger: true
        passed: [ChartRepo_Push]
      - put: helmKube
        params:
          chart: chartmuseum/hello_hapi_helmpkg
